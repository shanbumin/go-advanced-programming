package main


//在Go语言中，同一个Goroutine线程内部，顺序一致性内存模型是得到保证的。
//但是不同的Goroutine之间，并不满足顺序一致性内存模型，需要通过明确定义的同步事件来作为同步的参考。
//如果两个事件不可排序，那么就说这两个事件是并发的。
//为了最大化并行，Go语言的编译器和处理器在不影响上述规定的前提下可能会对执行语句重新排序（CPU也会对一些指令进行乱序执行）。

//因此，如果在一个Goroutine中顺序执行`a = 1; b = 2;`两个语句，虽然在当前的Goroutine中可以认为`a = 1;`语句先于`b = 2;`语句执行，
//但是在另一个Goroutine中`b = 2;`语句可能会先于`a = 1;`语句执行，
//甚至在另一个Goroutine中无法看到它们的变化（可能始终在寄存器中）。
//也就是说在另一个Goroutine看来, `a = 1; b = 2;`两个语句的执行顺序是不确定的。
//如果一个并发程序无法确定事件的顺序关系，那么程序的运行结果往往会有不确定的结果。
//比如下面这个程序：



func main() {
	go println("你好, 世界")
}


//根据Go语言规范，`main`函数退出时程序结束，不会等待任何后台线程。
//因为Goroutine的执行和`main`函数的返回事件是并发的，谁都有可能先发生，所以什么时候打印，能否打印都是未知的。