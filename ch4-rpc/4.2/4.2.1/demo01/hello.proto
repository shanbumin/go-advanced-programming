syntax = "proto3";
//开头的syntax语句表示采用proto3的语法。
//第三版的Protobuf对语言进行了提炼简化，
//所有成员均采用类似Go语言中的零值初始化（不再支持自定义默认值），
//因此消息成员也不再需要支持required特性。


//然后package指令指明当前是main包（这样可以和Go的包名保持一致，简化例子代码），当然用户也可以针对不同的语言定制对应的包路径和名称。
package main;
//Protobuf中最基本的数据单元是message，是类似Go语言中结构体的存在。
//在message中可以嵌套message或其它的基础数据类型的成员。



//最后message关键字定义一个新的String类型，在最终生成的Go语言代码中对应一个String结构体。
//String类型中只有一个字符串类型的value成员，该成员编码时用1编号代替名字。
//在XML或JSON等数据描述语言中，一般通过成员的名字来绑定对应的数据。
//但是Protobuf编码却是通过成员的唯一编号来绑定对应的数据，
//因此Protobuf编码后数据的体积会比较小，但是也非常不便于人类查阅。
//我们目前并不关注Protobuf的编码技术，最终生成的Go结构体可以自由采用JSON或gob等编码格式，
//todo 因此大家可以暂时忽略Protobuf的成员编码部分。  protoc --go_out=.  --proto_path=.  hello.proto
message String {
  string value = 1;
}

